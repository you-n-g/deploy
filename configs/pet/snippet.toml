
[[Snippets]]
  Description = "grep cn"
  Output = ""
  Tag = []
  command = "rg '[\\p{Han}]'"

[[Snippets]]
  Description = "conda create"
  Output = ""
  Tag = []
  command = "conda create -y -n <env_name=XXX> python=<py_version=3.8>"

[[Snippets]]
  Description = "rsync high freq used"
  Output = ""
  Tag = []
  command = "rsync  -avzrP -e ssh XXX XXX  # z(compression) P(progress)"

[[Snippets]]
  Description = "black format"
  Output = ""
  Tag = []
  command = "black .  -l 120"

[[Snippets]]
  Description = "terminalizer record (fix sharing bug... https://www.terminalizer.com/view/a6b2320b5691 )"
  Output = ""
  Tag = []
  command = "terminalizer record XXX -d zsh"

[[Snippets]]
  Description = "process tree"
  Output = ""
  Tag = []
  command = "pstree -pas"

[[Snippets]]
  Description = "jupyter --ip 0.0.0.0"
  Output = ""
  Tag = []
  command = "echo `hostname -I` && jupyter notebook --no-browser --port 9000 --ip 0.0.0.0"

[[Snippets]]
  Description = "jupyter --ip `hostname -I | awk '{print $1}'`"
  Output = ""
  Tag = []
  command = "jupyter notebook --no-browser --port 9000 --ip `hostname -I | awk '{print $1}'` # You can not access 127.0.0.1 when binding hostname"

[[Snippets]]
  Description = "tmux list pane"
  Output = ""
  Tag = []
  command = "tmux list-panes -a -F \"#{pane_pid} #{session_name}:#{window_index}:#{pane_index}\""

[[Snippets]]
  Description = "py-spy record"
  Output = ""
  Tag = []
  command = "py-spy record -o profile.svg -- <cmd>"

[[Snippets]]
  Description = "git add me qlib"
  Output = ""
  Tag = []
  command = "git remote add me git@github.com:you-n-g/qlib.git"

[[Snippets]]
  Description = "py-spy top"
  Output = ""
  Tag = []
  command = "sudo env \"PATH=$PATH\"  py-spy top --pid"

[[Snippets]]
  Description = "snakeviz"
  Output = ""
  Tag = []
  command = "snakeviz -s -H `hostname -I | awk '{print $1}'` stats_out"

[[Snippets]]
  Description = "py-spy dump"
  Output = ""
  Tag = []
  command = "sudo env \"PATH=$PATH\"  py-spy dump --pid"

[[Snippets]]
  Description = "autossh proxy"
  Output = ""
  Tag = []
  command = "autossh -R 6489:127.0.0.1:6489 XXX # http proxy deployed locally, XXX configured in .ssh/config"

[[Snippets]]
  Description = "fzf preview for output lines"
  Output = ""
  Tag = []
  command = "fzf  --preview \"echo {} | bat -l  Python --style plain # --color=always\" --preview-window :wrap"

[[Snippets]]
  Description = "tmux edit pane name"
  Output = ""
  Tag = []
  command = "printf '\\033]2;%s\\033\\\\' '<pane-name>'"

[[Snippets]]
  Description = "tmux enable boarder (this will conflict with vim-slime)"
  Output = ""
  Tag = []
  command = "tmux set pane-border-status top"

[[Snippets]]
  Description = "for each dir git status"
  Output = ""
  Tag = []
  command = "for d in `ls` ; do  cd $d ; echo \"=================`pwd`\" ;  git status  ; cd .. ;  done"

[[Snippets]]
  Description = "clone my style project"
  Output = ""
  Tag = []
  command = "clone.py all <source env=online_V05> <target env=online_V06>  <source project path=/home/xiaoyang/repos/online3rd_projects/V05> <target project path=/home/xiaoyang/repos/online3rd_projects/V06>"

[[Snippets]]
  Description = "conda clone"
  Output = ""
  Tag = []
  command = "conda create --name <env_name=online_V06>_gpu --clone <env_name=online_V06>"

[[Snippets]]
  Description = "reload tmux config"
  Output = ""
  Tag = []
  command = "tmux source ~/.tmux.conf"

[[Snippets]]
  Description = "start mlflow ui with long timeout"
  Output = ""
  Tag = []
  command = "GUNICORN_CMD_ARGS='--timeout 120'  mlflow ui -h `hostname -I | awk '{print $1}'` -p <port=5000>"

[[Snippets]]
  Description = "initial the tmux session for coding"
  Output = ""
  Tag = []
  command = "tmux rename-window code ; tmux new-window -n code_shell ; tmux new-window -n ops ; tmux new-window -n ops_shell ; tmux new-window -n service"

[[Snippets]]
  Description = "my repos"
  Output = ""
  Tag = []
  command = "git clone git@ssh.dev.azure.com:v3/you-n-g/qutils/cluster_manager ; git clone git@ssh.dev.azure.com:v3/you-n-g/qutils/qutils"

[[Snippets]]
  Description = "grep with ignore"
  Output = ""
  Tag = []
  command = "rg  --no-ignore --no-ignore-dot <grep_pattern=XXX> <grep_path=.>"

[[Snippets]]
  Description = "clean jupyter output"
  Output = "Nothing"
  Tag = []
  command = "ipynb_output_filter.py < <notebook=name.ipynb> > _yx_tmp  &&  mv _yx_tmp <notebook=name.ipynb> "

[[Snippets]]
  Description = "add git ignore"
  Output = ""
  Tag = []
  command = "cp ~/deploy/configs/git/py.gitignore .gitignore"

[[Snippets]]
  Description = "Forward proxy"
  Output = ""
  Tag = []
  command = "ssh xiaoyang@us.afeyoung.icu -L0.0.0.0:6489:0.0.0.0:6489  -D 0.0.0.0:8964"

[[Snippets]]
  Description = "agedu"
  Output = ""
  Tag = []
  command = "agedu --auth none -f agedu.dat -w --address `hostname -I | awk '{print $1}'`:5432"

[[Snippets]]
  Description = "install favorite package"
  Output = ""
  Tag = []
  command = "bash ~/deploy/deploy_apps/install_fav_py_pack.sh"

[[Snippets]]
  Description = "python minimal install after create conda env"
  Output = ""
  Tag = []
  command = "pip install ipdb ipython neovim fire yapf pylint black pipenv"

[[Snippets]]
  Description = "conda remove"
  Output = ""
  Tag = []
  command = "conda remove --name <env_name=XXX> --all"

[[Snippets]]
  Description = "view view file head"
  Output = ""
  Tag = []
  command = "head -n <top=50> <fname=600519.csv> | vim -"

[[Snippets]]
  Description = "git clean all untracked data"
  Output = ""
  Tag = []
  command = "git clean -d -x -f"

[[Snippets]]
  Description = "create qlib-based project"
  Output = ""
  Tag = []
  command = "mkdir <name> && cd <name> && cp.py --name <name> --py_ver 3.8 all --inst_qlib"

[[Snippets]]
  Description = "install my env"
  Output = ""
  Tag = []
  command = "sudo apt-get install -y git curl &&  git clone https://github.com/you-n-g/deploy && cd deploy &&  ./deploy.sh  # make sure you can sudo without password"

[[Snippets]]
  Description = "docker run, interactive, and remove example"
  Output = ""
  Tag = []
  command = "docker run -it --rm <img=kaggle/python:latest> /bin/bash"

[[Snippets]]
  Description = "qlib pylint"
  Output = ""
  Tag = []
  command = "pylint --disable=C0104,C0114,C0115,C0116,C0301,C0302,C0411,C0413,C1802,R0201,R0401,R0801,R0902,R0903,R0911,R0912,R0913,R0914,R0915,R1720,W0105,W0123,W0201,W0511,W0613,W1113,W1514,E0401,E1121,C0103,C0209,R0402,R1705,R1710,R1725,R1735,W0102,W0212,W0221,W0223,W0231,W0237,W0612,W0621,W0622,W0703,W1309,E1102,E1136 --const-rgx='[a-z_][a-z0-9_]{2,30}$' qlib --init-hook \"import astroid; astroid.context.InferenceContext.max_inferred = 500\""

[[Snippets]]
  Description = "set visible gpu/cuda device"
  Output = ""
  Tag = []
  command = "export CUDA_VISIBLE_DEVICES=1,2"

[[Snippets]]
  Description = "add qlib remote repo"
  Output = ""
  Tag = []
  command = "git remote add <user> https://github.com/<user>/qlib ; git fetch <user> <branch=main>  && git checkout <user>/<branch=main>"

[[Snippets]]
  Description = "git ignore change of specific file (Ref https://stackoverflow.com/a/1753078)"
  Output = ""
  Tag = []
  command = "git update-index --assume-unchanged <file list>"

[[Snippets]]
  Description = "neovim without any config:w"
  Output = ""
  Tag = []
  command = "vim -u NONE -U NONE -N -i NONE"

[[Snippets]]
  Description = "start with only lua config"
  Output = ""
  Tag = []
  command = "vim -u ~/deploy/configs/nvim/init_debug_lua.vim -U NONE -N -i NONE"

[[Snippets]]
  Description = "fast attach docker"
  Output = ""
  Tag = []
  command = "docker exec -it `docker ps --filter 'status=running' -l --format '{{.Names}}'` bash"

[[Snippets]]
  Description = "fast remove docker"
  Output = ""
  Tag = []
  command = "docker rm -f `docker ps -l --format '{{.Names}}'`"

[[Snippets]]
  Description = "git commit & skip precommit"
  Output = ""
  Tag = []
  command = "git commit --no-verify  -v"

[[Snippets]]
  Description = "Clear PageCache only"
  Output = ""
  Tag = []
  command = "sudo su  -c \"sync; echo 1 > /proc/sys/vm/drop_caches\""

[[Snippets]]
  Description = "sudo reserve most env variables"
  Output = ""
  Tag = []
  command = "sudo -E env \"PATH=$PATH\""

[[Snippets]]
  Description = "fast install torch"
  Output = ""
  Tag = []
  command = "pip install light-the-torch && ltt install torch"

[[Snippets]]
  Description = "Jupyter no password"
  Output = ""
  Tag = []
  command = " --NotebookApp.token='' --NotebookApp.password=''"

[[Snippets]]
  Description = "jupyter ascending prefix"
  Output = ""
  Tag = []
  command = "export JUPYTER_ASCENDING_EXECUTE_PORT=9000 # vim  # space+rx space+ren"

[[Snippets]]
  Description = "cd into lazy vim"
  Output = ""
  Tag = []
  command = "cd ~/.local/share/nvim/lazy/LazyVim"

[[Snippets]]
  Description = "ascending suite (jupyter and vim)"
  Output = "This should  be 0.0.0.0 instead of ip address to enable local vim access"
  Tag = []
  command = "_JPORT=9011 ; JUPYTER_ASCENDING_EXECUTE_PORT=$_JPORT jupyter notebook --no-browser --port $_JPORT --ip 0.0.0.0  --NotebookApp.token='' --NotebookApp.password='' # JUPYTER_ASCENDING_EXECUTE_PORT=$_JPORT vim"

[[Snippets]]
  Description = "jupyter ascending make pair"
  Output = ""
  Tag = []
  command = "python -m jupyter_ascending.scripts.make_pair --base <project=jupyter>"

[[Snippets]]
  Description = "create a project from Python project template based on copier"
  Output = ""
  Tag = []
  command = "copier copy gh:serious-scaffold/ss-python <project_path>  # pipx install copier==9.3.1 # you must install the right version of copier"

[[Snippets]]
  Description = "Prompt"
  Output = ""
  Tag = []
  command = "fix grammars & typos"

[[Snippets]]
  Description = "Disable precommit like --no-verify (https://github.com/typicode/husky/issues/346) ; but I found both HUSKY_SKIP_HOOKS=1 and export HUSKY=0 don't work"
  Output = ""
  Tag = []
  command = "--no-verify"

[[Snippets]]
  Description = "create new Python project from scaffold (suppose you have already create the github project)"
  Output = ""
  Tag = []
  command = "pip install pipx && git init && make prerequisites && pdm lock && make dev && git remote add origin git@github.com:you-n-g/<project>.git && git branch -M main && git add . && git commit -a -m \"Init from serious-scaffold-python.\" && git push -u origin main --no-verify"

[[Snippets]]
  Description = "add user with only rsa keys"
  Output = ""
  Tag = []
  command = "sudo adduser <username> --disabled-password && sudo su <username> -c 'mkdir -p ~/.ssh/ && chmod 700 ~/.ssh/ && touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'"

[[Snippets]]
  Description = "cd onedrive in windows WSL"
  Output = ""
  Tag = []
  command = "ONEDRIVE_PATH=$(cmd.exe /c echo %onedriveconsumer% 2> /dev/null | sed -e 's/C:/\\\\mnt\\\\c/g' | sed -e 's/\\\\/\\//g' | tr -d \"\\r\") ; cd $ONEDRIVE_PATH"

[[Snippets]]
  Description = "Python pretty print"
  Output = ""
  Tag = []
  command = "__import__(\"pprint\").pprint("

[[Snippets]]
  Description = "use gdb to attach to python program"
  Output = ""
  Tag = []
  command = "sudo `which gdb` python <pid>"

[[Snippets]]
  Description = "cprofile profiling debuggging"
  Output = ""
  Tag = []
  command = "python -m cProfile -s <sort_filed=time> -o <out_file=stat_out> <script=script.py>"

[[Snippets]]
  Description = "download with http.server in Python"
  Output = ""
  Tag = []
  command = "python -m http.server --bind `hostname -I | awk '{print $1}'`"

[[Snippets]]
  Description = "add python path (only export &  same line command works)"
  Output = ""
  Tag = []
  command = "export PYTHONPATH=$PYTHONPATH ; python -c 'import sys; print(sys.path)'"

[[Snippets]]
  Description = "run docker"
  Output = ""
  Tag = []
  command = "docker run -it --rm <image=XXX_Repo:XXX_tag> /bin/bash"

[[Snippets]]
  Description = "build sphinx and watch changes"
  Output = ""
  Tag = []
  command = "sphinx-autobuild docs docs/_build/html  --host `hostname -I | awk '{print $1}'` --watch ."

[[Snippets]]
  Description = "remove pre-commmit when pushing"
  Output = ""
  Tag = []
  command = "pre-commit uninstall --hook-type pre-push"

[[Snippets]]
  Description = "vim git sign show diff files"
  Output = ""
  Tag = []
  command = "Gitsigns diffthis ~1"

[[Snippets]]
  Description = "vim git sign show change base commit"
  Output = ""
  Tag = []
  command = "Gitsigns change_base ~1"

[[Snippets]]
  Description = "export source"
  Output = ""
  Tag = []
  command = "export $(grep -v '^#' <env-file=.env> | xargs)"

[[Snippets]]
  Description = "unset $DISPLAY; So some CLI tools will work more correctly without calling X server"
  Output = ""
  Tag = []
  command = "unset DISPLAY"

[[Snippets]]
  Description = "xytoy"
  Output = ""
  Tag = []
  command = "git clone git@github.com:you-n-g/toy.git && make prerequisites && make dev"

[[Snippets]]
  Description = "from sys to tmux clipboard"
  Output = ""
  Tag = []
  command = "xsel --clipboard --output | tmux load-buffer -w -"

[[Snippets]]
  Description = "from tmux to sys clipboard"
  Output = ""
  Tag = []
  command = "tmux save-buffer - | xsel --clipboard --input"

[[Snippets]]
  Description = "git log for orphan commits"
  Output = ""
  Tag = []
  command = "git log --all --oneline --graph --decorate --reflog"

[[Snippets]]
  Description = "aider start"
  Output = ""
  Tag = []
  command = "key_shell.sh <cred=|_openai_lite_||_azure_ad_lite_||_azure_lite_||_deepseek_lite_|> bash -c 'aider --model <model=|_$CHAT_MODEL_||_$CHAT_MODEL_|> --weak-model <model> --no-auto-commit --no-show-model-warnings'"

[[Snippets]]
  Description = "aider command"
  Output = ""
  Tag = []
  command = "key_shell.sh <cred=|_openai_lite_o3_mini_||_openai_lite_||_azure_ad_lite_||_azure_lite_||_deepseek_lite_|> bash -c 'aider --model <model=|_$CHAT_MODEL_||_$CHAT_MODEL_|> --weak-model <model> -m \"<command=/commit>\"'"

[[Snippets]]
  Description = "health check for openai & llm"
  Output = ""
  Tag = []
  command = "key_shell.sh <cred=|_azure_ad_||_azure_||_azure_ad_lite_||_azure_lite_||_deepseek_lite_||_deepseek_closeai_lite_||_openai_o3_mini_||_openai_|> hc_llm.py <api=|_azure_||_litellm_||_native_|>"

[[Snippets]]
  Description = "launch litellm proxy"
  Output = ""
  Tag = []
  command = "SELECT_CRED=<cred=|_azure_ad_default_lite_||_azure_lite_|> EXTRA_ARG=\"<EXTRA_ARG=|__||_--model gpt-4o_|>\" llm_proxy.sh"

[[Snippets]]
  Description = "nvim-based CLI/CMD"
  Output = ""
  Tag = []
  command = "nvim --cmd \":terminal\" --cmd \":lua vim.api.nvim_feedkeys('i', 'n', false)\""

[[Snippets]]
  Description = "set tmux session default aider llm backend"
  Output = ""
  Tag = []
  command = "tmux set-env llm_aider <cred=|_deepseek_lite_||_deepseek_closeai_lite_||_anthropic_closeai_lite_||_openai_closeai_lite_o3_mini_||_openai_lite_o3_mini_|>"

[[Snippets]]
  Description = "remove tmux session default aider llm backend"
  Output = ""
  Tag = []
  command = "tmux set-env -r llm_aider"

[[Snippets]]
  Description = "remove color in the content"
  Output = ""
  Tag = []
  command = "sed -r 's/\\x1B\\[[0-9;]*[mK]//g' <file=typescript> > <file>_no_color"

[[Snippets]]
  Description = "use vim to view log"
  Output = ""
  Tag = []
  command = "vim -n <file=|_typescript_||_typescript.debug_||__|> -c \"lua require'extra_fea.log_view'.set_style()\" -c \"lua require'extra_fea.log_view'.display_outline()\""

[[Snippets]]
  Description = "set vim cred"
  Output = ""
  Tag = []
  command = "tmux set-env -g <cred=|_vim_cred local_||_-r vim_cred_|>"

[[Snippets]]
  Description = "browser, www, internet"
  Output = ""
  Tag = []
  command = "docker run -it --rm browsh/browsh"

[[Snippets]]
  Description = "clean vim's swap files."
  Output = ""
  Tag = []
  command = "find . -name '*.swp' -exec rm {} \\\\;"

[[Snippets]]
  Description = "kill process on a specifc port"
  Output = ""
  Tag = []
  command = "lsof -t -i:<port=|_5678_||_38888_|> | xargs -r kill -9"

[[Snippets]]
  Description = "append information to simplegpt"
  Output = ""
  Tag = []
  command = "cr <url=|_https://docs.litellm.ai/docs/_||__|> >> .sgpt.md"

[[Snippets]]
  Description = "backup simplegpt prompt"
  Output = ""
  Tag = []
  command = "mv .sgpt{,.`date +%F`}.md"

[[Snippets]]
  Description = "get ip addresss"
  Output = ""
  Tag = []
  command = "curl cip.cc"

[[Snippets]]
  Description = "creaet tmux panes"
  Output = ""
  Tag = []
  command = "bash ~/deploy/helper_scripts/SA/tmux_cluster.sh create_panes"
