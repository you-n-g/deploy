# A valid snippet should starts with:
#
#        snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#        endsnippet
#
# Snippet options:
#
#        b - Beginning of line.
#        i - In-word expansion.
#        w - Word boundary.
#        r - Regular expression
#        e - Custom context snippet
#        A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#        snippet emitter "emitter properties" b
#        private readonly ${1} = new Emitter<$2>()
#        public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#        endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# *UltiSnips-python* : 这里可以直接用python脚本自动插入代码

snippet import "Normal Import" b
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(color_codes=True)
plt.rcParams['font.sans-serif'] = 'SimHei'
plt.rcParams['axes.unicode_minus'] = False
from tqdm.cli import tqdm
# tqdm.pandas()  # for progress_apply
from IPython import get_ipython
IPY = get_ipython()
IPY.run_line_magic("matplotlib", "inline")
IPY.run_line_magic("load_ext", "autoreload")
# IPY.run_line_magic("autoreload", 1)
IPY.run_line_magic("load_ext", "autotime")
endsnippet


snippet path "import path" b
import sys
sys.path.append('~/repos/${1:data_selection}')
endsnippet

snippet ol "Outlines" b
# %% [markdown]
# # Outlines: ${1:header}
endsnippet

snippet ol2 "Outlines" b
# %% [markdown]
# ## Outlines: ${1:header}
endsnippet

snippet IPY "run magic" b
IPY.run_line_magic("${1:magic command}")
endsnippet

snippet groupbyic "calc pred label df ic" b
groupby("datetime").apply(lambda df: df['${1:score}'].corr(df['${2:label}'], method='${3:spearman}'))
endsnippet

snippet raisenip "Not Implemented" b
raise NotImplementedError(f"This type of input is not supported")
endsnippet

snippet TODOPI "Implemented TODO" b
# TODO: Please implement me!!!!
return
endsnippet

snippet dirn "get current dirname" b
from pathlib import Path
DIRNAME = Path(__file__).absolute().resolve().parent
endsnippet

snippet emb "Embed for debuging" b
from IPython import embed; embed()
endsnippet

snippet fontsize "Change font size" b
def change_fs(font_size):
    font_size = font_size
    plt.rc('font', size=font_size)         # controls default text sizes
    plt.rc('axes', titlesize=font_size)    # fontsize of the axes title
    plt.rc('axes', labelsize=font_size)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=font_size)   # fontsize of the tick labels
    plt.rc('ytick', labelsize=font_size)   # fontsize of the tick labels
    plt.rc('legend', fontsize=font_size)   # legend fontsize
    plt.rc('figure', titlesize=font_size)  # fontsize of the figure title
endsnippet

snippet ntf "Notify me" b
from wan import ntf; ntf('${1:Done}')
endsnippet

snippet read_yaml "read yaml" b
import yaml
with open(${1:conf_path}) as f:
    conf = yaml.load(f, Loader=yaml.FullLoader)
endsnippet

snippet subrun "subprocess.run" b
subprocess.run('${1:command}', shell=True)
endsnippet

snippet loglocal "Description" b
logger.info({k: v for k, v in locals().items() if k not in {'self'}})
endsnippet

snippet joblib "import joblib" b
from joblib import Parallel, delayed
endsnippet

snippet paral "use paralllel" b
Parallel(n_jobs=-1, verbose=10)
endsnippet

snippet msheader "Microsoft Header" b
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
endsnippet

snippet raisemnip  "raise method not implemented" b
raise NotImplementedError(f"Please implement the \`${1:func}\` method")
endsnippet

snippet vir "Virtual Base class" b
from abc import ABC, abstractmethod
class ${1:A}(ABC):
    @abstractmethod
    def ${2:f}(self):
        pass
endsnippet

snippet pdemi "Pandas Example Multi-Index" b
import pandas as pd
import numpy as np

arrays = [
    np.array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux']),
    np.array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'])
]
df = pd.DataFrame(np.random.randn(8, 4), index=arrays)
endsnippet

snippet dfcmp "Compare dataframe" b
# pip install datacompy
import datacompy
compare = datacompy.Compare(df_new, df_old, on_index=True, rel_tol=1e-5, df1_name="new", df2_name="old")
print(compare.report())
endsnippet

snippet pwd "python %" b
python `!v expand('%')`
endsnippet

snippet dw "Deprecation Warning" b
import warnings
warnings.warn("${1:XXX} is deprecated; use ${2:XXX}.", DeprecationWarning)
endsnippet

snippet at "autotime" b
from IPython import get_ipython
IPY = get_ipython()
IPY.run_line_magic("load_ext", "autotime")
endsnippet

snippet pysn "pysnooper" b
# pip install pysnooper
import pysnooper
@pysnooper.snoop(depth=2)
endsnippet

snippet fir "fire & main" b
import fire
if __name__ == "__main__":
    fire.Fire(${1:XXX})
endsnippet

snippet ree "re example" b
m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
print(m.groupdict())
endsnippet

snippet setup "simple setup.py" b
from setuptools import setup, find_packages
setup(
    name='${1:XXX}',
    version='0.0.1',
    packages=find_packages(),
    install_requires=[
        'loguru>=0.5.1',
    ],
)
endsnippet

snippet rei "next iter re" b
next(iter(re.findall(r'^([^_\]+_)?z(\d*)(_r)?$', ${1:XXX})))
endsnippet

snippet cb "docstring code blocks" b
.. code-block:: python

    
endsnippet

snippet tracep "call trace print" b
import traceback
for line in traceback.format_stack():
    print(line)
endsnippet

snippet qlibex "Qlib example" b
from qlib import init
init()

from qlib.data import D
exp_l = ["$vwap + $close", "$vwap", "$close"]
data = D.features(D.instruments("csi300"), exp_l)
data.head()
endsnippet

snippet mult "Multi Processing Example" b
from multiprocessing import Pool


def worker(x):
    return x * x


if __name__ == "__main__":
    pool = Pool(5)
    res = []
    for kwargs in [{'x': 1}, {'x': 2}, {'x': 3}]:
        res.append(pool.apply_async(worker, [], kwargs))

    # get result and prevent the main process from exiting
    for r in res:
        try:
            print('task ended:', r.get())
            # 子进程如果出现异常，会在r.get()这里reraise异常. 导致父进程挂掉，子进程无法继续执行
            # TODO: 如果在另外一个进程里core dumped，会在r.get()这一步卡住
        except Exception as e:
            print(u"Type=%s, Args=%s" % (type(e), e.args))
    pool.close()
    # TODO: If I put it before r.get(). The print info above will never output the data.
    # 在并行地分配任务的代码结束后调用它，这样pool在完成所有任务后就会自动关闭了
    # Indicate that no more data will be put on this queue by the current process.

    pool.join()
    # one must call close or terminate() before call join. 不然主进程会等子进程结束，子进程会等主进程分配任务
endsnippet

snippet tc "type checking" b
from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    pass
endsnippet

snippet ipdbconfi "confirm" b
if globals().get("YX_CONFIRM_${1:XXX}") is None:
    __import__('ipdb').set_trace()
    # globals()["YX_CONFIRM_${1:XXX}"] = True
endsnippet

snippet testtpl "test template" b
import unittest


class TimeUtils(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

	def to_str(self, obj):
		return "".join(str(obj).split())

    def test_index_data(self):
        self.assertEqual(self.to_str(data.tail()), self.to_str(res))


if __name__ == "__main__":
    unittest.main()
endsnippet

snippet pyli "pylint ignore" w
# pylint: disable=E1101
endsnippet

snippet joblibtpl "joblib template" b
from joblib import Parallel, delayed

keys = []
res = []
for i in range(10):
    keys.append(i)
    # please place multiprocessing related work outside \`delayed\` in case of nested multiprocessing
    # It would be best to only leave the computing tensive work in subprocess
    res.append(delayed(sum)([i]))
res = Parallel(n_jobs=-1, verbose=10)(res)

field_res = dict(zip(keys, res))
endsnippet

snippet memprof "memory profiler" b
from memory_profiler import profile
# pip install memory_profiler
# python -m memory_profiler <script>
@profile
endsnippet
