#!/usr/bin/env python

import typer
from pathlib import Path
from rdagent.utils.agent.tpl import T
import urllib.request
import tempfile
import os
import pypdf


app = typer.Typer()


@app.command()
def explain_ws(code_fname: str = "main.py", stdout_fname: str = "stdout.txt"):
    # render template with provided code and stdout, then create a new file chat.md
    with open(code_fname, 'r') as cf:
        code_content = cf.read()
    with open(stdout_fname, 'r') as sf:
        stdout_content = sf.read()
    chat_content = T(".buildchat:explain_ws").r(code=code_content, stdout=stdout_content)
    with open("chat.md", "w") as out_f:
        out_f.write(chat_content)


@app.command()
def compare(curr_ws: Path = typer.Argument(..., help="Path to current workspace"),
            prev_ws: Path = typer.Argument(..., help="Path to previous workspace")):
    curr_ws = Path(curr_ws)
    prev_ws = Path(prev_ws)
    with (curr_ws / "main.py").open() as cf:
        curr_code_content = cf.read()
    with (curr_ws / "stdout.txt").open() as cf:
        curr_stdout_content = cf.read()
    with (prev_ws / "main.py").open() as cf:
        prev_code_content = cf.read()
    with (prev_ws / "stdout.txt").open() as cf:
        prev_stdout_content = cf.read()
    chat_content = T(".buildchat:compare").r(curr_code=curr_code_content,
                                             curr_stdout=curr_stdout_content,
                                             prev_code=prev_code_content,
                                             prev_stdout=prev_stdout_content)
    with open("chat.md", "w") as out_f:
        out_f.write(chat_content)


from firecrawl import FirecrawlApp


@app.command()
def web(url: str = typer.Argument(..., help="The target URL to scrape"),):
    firecrawl_app = FirecrawlApp(api_key="fc-YOUR_API_KEY", api_url="http://localhost:3002")
    scrape_result = firecrawl_app.scrape_url(url, params={'formats': ['markdown']})
    content = scrape_result["markdown"]

    with open("chat.md", "w") as out_f:
        out_f.write(T(".buildchat:web").r(markdown=content))


@app.command()
def pdf(
    url: str = typer.Argument(..., help="The PDF URL to download and convert"),
    outfile: Path = Path("chat.md"),
):
    """
    Download a PDF from a URL, extract its text, and write a chat.md file.
    """
    # Download to a temporary file
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpf:
        tmp_pdf_path = tmpf.name

    try:
        urllib.request.urlretrieve(url, tmp_pdf_path)

        # Extract text using pypdf
        reader = pypdf.PdfReader(tmp_pdf_path)
        parts = []
        for page in reader.pages:
            # Directly extract text without try-except, let errors propagate if they occur
            parts.append(page.extract_text() or "")
        text = "\n".join(parts).strip()

        with open(outfile, "w") as out_f:
            out_f.write(T(".buildchat:pdf").r(text=text))
    finally:
        # Clean up the temporary file
        try:
            os.unlink(tmp_pdf_path)
        except Exception:
            pass

if __name__ == "__main__":
    app()
