#!/usr/bin/env python

from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    chat_model: str = "o4-mini"
    diff_head: str = "HEAD^"


from litellm import completion

from typer import Typer

app = Typer()

settings = Settings()

from jinja2 import Template

tpl = """
You are an expert in coding.

Here is the output of `git --no-pager diff` in your terminal
```
{{ full_content }}
```

Here is the complete code of all changed files.
{{ all_buf }}

Please review the changes. Please point out the errors that will certainly introduce bugs in the program.  
When you point them out, please specify the concrete exception that will be raised or the side effect/consequence.
Only point out the errors that are brought about by the changes.
If you want to point out other errors you find, please use a clear divider like "---" to distinguish the errors brought about by the changes from others.
"""

# 1) run git diff to get the changed code
import subprocess
import os
from typing import List


def run_git_diff() -> str:
    """
    Run `git --no-pager diff` and return the diff as a string.
    The output is formatted with Rich markup for better display.
    """
    from rich.console import Console
    from rich.syntax import Syntax

    cmd = ["git", "--no-pager", "diff", settings.diff_head]
    result = subprocess.run(cmd, capture_output=True, text=True)
    diff_content = result.stdout

    # Print the diff using rich.syntax for better highlighting
    if diff_content.strip():  # Only display if there's diff
        console = Console()
        console.print(Syntax(diff_content, "diff", theme="ansi_dark", line_numbers=False))
    return diff_content


# 2) get all the source code of the changed files
def get_changed_files() -> List[str]:
    result = subprocess.run(["git", "diff", "--name-only", settings.diff_head], capture_output=True, text=True)
    files = result.stdout.strip().splitlines()
    return [f for f in files if os.path.isfile(f)]


def get_files_content(files: List[str]) -> str:
    content = []
    for filename in files:
        try:
            with open(filename, "r") as f:
                code = f.read()
            content.append(f"Filename: {filename}\n```\n{code}\n```")
        except Exception as e:
            content.append(f"Filename: {filename}\n[Could not read file: {e}]")
    return "\n\n".join(content)


# 3) get LLM response
def get_review(full_content: str, all_buf: str, model: str) -> str:
    prompt = Template(tpl).render(full_content=full_content, all_buf=all_buf)
    response = completion(model=model, messages=[{"role": "user", "content": prompt}])
    return response["choices"][0]["message"]["content"]


# 4) display the response in markdown in with rich format
from rich.console import Console
from rich.markdown import Markdown
import typer


@app.command()
def review(model: str = typer.Option(None, help="Chat model to use (overrides config)")):
    console = Console()
    console.rule("Code Changes")
    diff = run_git_diff()

    changed_files = get_changed_files()
    console.rule("Retrieved files")
    console.print(Markdown(f"**Changed files:**\n{changed_files}"))
    files_content = get_files_content(changed_files)
    console.print("LOC: " + str(len(files_content.splitlines())))
    use_model = model or settings.chat_model
    review_response = get_review(diff, files_content, use_model)
    console.rule("Code Review")
    console.print(Markdown(review_response))


if __name__ == "__main__":
    print(settings)
    app()
